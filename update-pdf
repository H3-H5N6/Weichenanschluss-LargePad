#!/bin/bash

export THEME="Harald"

export OUTPUT_DIRECTORY=doc


my_exit(){
    if [ "$1" != "0" ]
    then    
        shift 1
        echo "ERROR $@. Abbruch"
        exit 1
    fi
}
export -f my_exit


if [ ! -e ${OUTPUT_DIRECTORY} ]
then
    mkdir ${OUTPUT_DIRECTORY}
else 
    if [ ! -d ${OUTPUT_DIRECTORY} ]
    then
        my_exit 1 "[${OUTPUT_DIRECTORY}] ist kein Verzeichnis"
    fi
fi

update-sch-pdf() {
    echo "# ################################################# #"
    echo "# Update schematic pdf und svg und erzuge ein png   #"
    echo "# ################################################# #"

    git diff-index --quiet HEAD "$@"
    if [ $? -ne 0 ] || [ ! -f "$OUTPUT_DIRECTORY/$*.pdf" ]
    then
        echo "==> sch export pdf"
        kicad-cli sch export pdf  "$@" -o "$OUTPUT_DIRECTORY/$@.pdf" 
        my_exit $? "Kann [$OUTPUT_DIRECTORY/$@.pdf] nicht erzeugen."
        echo "<== done"
        echo ""

        echo "==> sch export svg"
        echo "$@"
        kicad-cli sch export svg --exclude-drawing-sheet --black-and-white "$@" -o "${OUTPUT_DIRECTORY}" 
        my_exit $? "Kann [$OUTPUT_DIRECTORY/$(basename $@ .kicad_sch).svg] nicht erzeugen."
        echo "<== done"
        echo ""
        
        echo "==> sch convert und trim zu png"
        SVG_FILE=$(basename "$@" .kicad_sch)
        convert -density 288 "${OUTPUT_DIRECTORY}/${SVG_FILE}.svg" tmp.png
        my_exit $? "Kann [$OUTPUT_DIRECTORY/${SVG_FILE}] nicht in ein PNG konvertieren."
        
        convert -trim tmp.png "${OUTPUT_DIRECTORY}/${SVG_FILE}".png 
        my_exit $? "Kann [$OUTPUT_DIRECTORY/${SVG_FILE}] nicht trimmen."
        
        rm tmp.png
        
        echo "<== done"
        
    else
        echo "==  kein Update notwendig"
        echo ""
    fi
}
export -f update-sch-pdf

update-pcb-pdf() {
    echo "# ################################################# #"
    echo "# Update pcb pdf und svg                      #"
    echo "# ################################################# #"
    
    git diff-index --quiet HEAD "$@"
    if [ $? -ne 0 ] || [ ! -f "${OUTPUT_DIRECTORY}/$@_B_Cu.pdf" ]
    then
        echo "==> pcb export pdf Rückseite"
        kicad-cli pcb export pdf -l "B.Cu,B.Mask,B.Silkscreen,B.Courtyard,Edge.Cuts" "$@" --theme "$THEME" -o "${OUTPUT_DIRECTORY}/$@_B_Cu.pdf" 
        my_exit $? "Kann [${OUTPUT_DIRECTORY}/$@_B_Cu.pdf] nicht erzeugen."
        echo "<== done"
        echo ""

        echo "==> pcb export pdf Vorderseite"
        kicad-cli pcb export pdf -l "F.Cu,F.Courtyard,Edge.Cuts" "$@" --theme "$THEME" -o "${OUTPUT_DIRECTORY}/$@_F_Cu.pdf" 
        my_exit $? "Kann [${OUTPUT_DIRECTORY}/$@_F_Cu.pdf] nicht erzeugen."
        echo "<== done"
        echo ""

        echo "==> pcb export pdf Bestückungsseite"
        kicad-cli pcb export pdf -l "F.Mask,F.Silkscreen,F.Courtyard,Edge.Cuts"      "$@" --theme "$THEME" -o "${OUTPUT_DIRECTORY}/$@_F.pdf" 
        my_exit $? "Kann [${OUTPUT_DIRECTORY}/$@_F.pdf] nicht erzeugen."
        echo "<== done"
        echo ""

        if [ -x /usr/bin/pdftk ]
        then
            pdftk "${OUTPUT_DIRECTORY}/$@_B_Cu.pdf" "${OUTPUT_DIRECTORY}/$@_F_Cu.pdf" "${OUTPUT_DIRECTORY}/$@_F.pdf" cat output "${OUTPUT_DIRECTORY}/$@.pdf"
        fi
        
        echo "==> pcb export svg Bestückungsseite"
        kicad-cli pcb export svg -l "F.Mask,F.Silkscreen,F.Courtyard,Edge.Cuts" \
            --exclude-drawing-sheet \
            --page-size-mode 2 \
            "$@" --theme "$THEME" -o "${OUTPUT_DIRECTORY}/$@_F.svg" 
        my_exit $? "Kann [${OUTPUT_DIRECTORY}/$@_F.svg] nicht erzeugen."
        echo ""
        echo "<== done"
        echo ""

    else
        echo "==  kein Update notwendig"
        echo ""
    fi
}
export -f update-pcb-pdf


case "$1" in

    pcb)
        find . -maxdepth 1 \( -name "*.kicad_pcb" -and -not -iname "_*.kicad_pcb" \) -exec /bin/bash -c 'update-pcb-pdf "$0"' {} \;
        ;;

    sch)
        find . -maxdepth 1 \( -name "*.kicad_sch" -and -not -iname "_*.kicad_sch" \) -exec /bin/bash -c 'update-sch-pdf "$0"' {} \;
        ;;
esac
